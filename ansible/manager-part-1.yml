---
- name: Run manager part 1
  hosts: testbed-manager.testbed.osism.xyz
  gather_facts: false

  vars:
    ansible_ssh_user: dragon
    apt_lock_timeout: 300
    operator_user: dragon
    repo_path: /home/ubuntu/src/github.com
    version_manager: latest
    is_zuul: false

    venv_path: /opt/venv
    ansible_playbook: "{{ venv_path }}/bin/ansible-playbook"

  tasks:
    - name: Copy SSH public key
      ansible.builtin.copy:
        content: "{{ lookup('file', '.id_rsa.' + cloud_env + '.pub') }}\n"
        dest: .ssh/id_rsa.pub
        mode: '0644'
        owner: "{{ operator_user }}"

    - name: Copy SSH private key
      ansible.builtin.copy:
        content: "{{ lookup('file', '.id_rsa.' + cloud_env) }}\n"
        dest: .ssh/id_rsa
        mode: '0600'
        owner: "{{ operator_user }}"
      no_log: true

    - name: Create configuration directory
      become: true
      ansible.builtin.file:
        state: directory
        path: /opt/configuration
        mode: '0755'
        owner: "{{ operator_user }}"

    - name: Copy testbed repo
      become: true
      become_user: dragon
      ansible.posix.synchronize:
        src: "{{ repo_path }}/osism/testbed/"
        delete: true
        dest: /opt/configuration

    - name: Install required packages
      become: true
      ansible.builtin.apt:
        name: "{{ item }}"
        state: present
        lock_timeout: "{{ apt_lock_timeout }}"
      loop:
        - build-essential
        - python3-dev

    - name: Install python requirements in venv
      ansible.builtin.pip:
        umask: "0022"
        name: "{{ item }}"
        state: present
        virtualenv: "{{ venv_path }}"
        virtualenv_command: python3 -m venv
      loop:
        - docker
        - netifaces
        - "python-gilt==1.2.3"
        - requests

    # shell required because of: command module does not accept
    # setting environment variables inline.
    - name: Sync configuration with generics  # noqa: command-instead-of-shell
      ansible.builtin.shell:
        chdir: /opt/configuration
        cmd: MANAGER_VERSION={{ version_manager }} gilt overlay
      when: version_manager != "latest"
      changed_when: true

    - name: Set docker registries
      ansible.builtin.command:
        cmd: /opt/configuration/scripts/set-docker-registry.sh
      when:
        - is_zuul | bool
        - version_manager != "latest"
      changed_when: true

    - name: Set docker namespace for kolla (when working with stable tags)
      ansible.builtin.lineinfile:
        path: /opt/configuration/environments/kolla/configuration.yml
        regexp: "^docker_namespace"
        line: "docker_namespace: kolla/release"
      when:
        - is_zuul | bool
        - version_manager != "latest"
      changed_when: true

    - name: Set docker namespace for kolla (when working with latest tags)
      ansible.builtin.lineinfile:
        path: /opt/configuration/environments/kolla/configuration.yml
        regexp: "^docker_namespace"
        line: "docker_namespace: kolla"
      when:
        - is_zuul | bool
        - version_manager == "latest"
      changed_when: true

    - name: Copy testbed crt
      become: true
      ansible.builtin.copy:
        src: ../environments/kolla/certificates/ca/testbed.crt
        dest: /usr/local/share/ca-certificates/
        mode: '0644'
        owner: root

    - name: Run update-ca-certificates
      become: true
      ansible.builtin.command: update-ca-certificates
      changed_when: true

    - name: Run manager part 2
      ansible.builtin.command: "{{ ansible_playbook }} -i testbed-manager.testbed.osism.xyz, -e version_manager={{ version_manager }} /opt/configuration/ansible/manager-part-2.yml"
      changed_when: true
