---
- name: Wait for cloud-init to finish
  hosts: testbed-manager.testbed.osism.xyz
  gather_facts: false

  tasks:
    # source: https://github.com/hashicorp/packer/issues/2639
    - name: Check /var/lib/cloud/instance/boot-finished
      ansible.builtin.raw: timeout 600 /bin/bash -c 'until stat /var/lib/cloud/instance/boot-finished 2>/dev/null; do echo Wait for cloud-init to finish; sleep 1; done'
      changed_when: false

- name: Run manager part 0
  hosts: testbed-manager.testbed.osism.xyz

  vars:
    repo_path: /home/ubuntu/src/github.com
    apt_lock_timeout: 300

  tasks:
    - name: Fail if Ubuntu version is lower than 22.04
      ansible.builtin.fail:
        msg: "Ubuntu version is {{ ansible_distribution_version }}, see https://osism.github.io/docs/advanced-guides/testbed#software for required version."
      when: ansible_distribution == "Ubuntu" and ansible_distribution_version < "22.04"

    - name: Update APT cache and run dist-upgrade
      become: true
      ansible.builtin.apt:
        upgrade: dist
        update_cache: true
        lock_timeout: "{{ apt_lock_timeout }}"

    - name: Set APT options on manager
      become: true
      ansible.builtin.shell: |
        set -o pipefail &&
        echo 'APT::Acquire::Retries "3";' > /etc/apt/apt.conf.d/80-retries
        echo '* libraries/restart-without-asking boolean true' | debconf-set-selections
      args:
        executable: /bin/bash
      changed_when: true

    - name: Install packages on manager
      become: true
      ansible.builtin.apt:
        name:
          - linux-generic-hwe-22.04
          - python3-netaddr
          - python3-pip
        update_cache: true
      changed_when: true

    - name: Remove existing Ansible package if necessary
      become: true
      ansible.builtin.apt:
        name: ansible
        state: absent

    - name: Install ansible-core on manager
      become: true
      ansible.builtin.command: |
          pip3 install --no-cache-dir 'ansible-core>=2.16.0,<2.17.0'
      changed_when: true

    - name: Create source directories
      become: true
      ansible.builtin.file:
        state: directory
        path: "/opt/src/{{ item }}"
        recurse: true
        mode: '0755'
        owner: ubuntu
      with_items:
        - osism/ansible-collection-commons
        - osism/ansible-collection-services

    - name: Copy sources
      ansible.posix.synchronize:
        src: "{{ repo_path }}/{{ item }}"
        delete: true
        dest: "/opt/src/{{ item }}"
      with_items:
        - osism/ansible-collection-commons
        - osism/ansible-collection-services

    - name: Create /usr/share/ansible directory
      become: true
      ansible.builtin.file:
        state: directory
        path: /usr/share/ansible
        mode: '0755'

    - name: Install collections
      become: true
      ansible.builtin.shell: |
          ansible-galaxy collection install --collections-path /usr/share/ansible/collections ansible.netcommon
          ansible-galaxy collection install --collections-path /usr/share/ansible/collections ansible.posix
          ansible-galaxy collection install --collections-path /usr/share/ansible/collections community.docker
          ansible-galaxy collection install --collections-path /usr/share/ansible/collections /opt/src/osism/ansible-collection-commons
          ansible-galaxy collection install --collections-path /usr/share/ansible/collections /opt/src/osism/ansible-collection-services
          chmod -R +r /usr/share/ansible
      changed_when: true

- name: Create operator user
  hosts: testbed-manager.testbed.osism.xyz
  gather_facts: true

  vars:
    operator_user: dragon
    operator_group: dragon
    operator_authorized_keys:
      - "{{ lookup('file', '.id_rsa.' + cloud_env + '.pub') }}"

  roles:
    - role: osism.commons.operator
