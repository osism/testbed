---
- name: Pre play
  hosts: all

  vars_files:
    - vars/cloud_envs.yml
    - vars/repositories.yml

  vars:
    basepath: "{{ ansible_user_dir }}/src/{{ repositories['testbed']['path'] }}"
    terraformbase_path: "{{ ansible_user_dir }}/src/{{ repositories['terraform-base']['path'] }}"
    terraform_path: "{{ basepath }}/terraform"
    terragrunt_version: v0.56.3 # renovate: datasource=github-releases depName=gruntwork-io/terragrunt
    terragrunt_download_url: "https://github.com/gruntwork-io/terragrunt/releases/download/{{ terragrunt_version }}/terragrunt_linux_amd64"

  tasks:
    - name: Set cloud_env fact (Zuul deployment)
      ansible.builtin.set_fact:
        cloud_env: "{{ cloud_envs[hostvars[groups['all'][0]]['nodepool']['label']] }}"
      when: "'nodepool' in hostvars[groups['all'][0]]"

    - name: Set cloud_env fact (local deployment)
      ansible.builtin.set_fact:
        cloud_env: "{{ testbed_environment | default('ci') }}"
      when: "'nodepool' not in hostvars[groups['all'][0]]"

    - name: Clean the cloud environment
      ansible.builtin.shell:
        cmd: |
          OS_CLOUD={{ cloud_env }} ~/venv/bin/python3 cleanup.py
        chdir: "{{ basepath }}/terraform/scripts"
      failed_when: false
      changed_when: true

    - name: Download terragrunt
      ansible.builtin.get_url:
        url: "{{ terragrunt_download_url }}"
        dest: "{{ ansible_user_dir }}/terragrunt"
        mode: "0755"

    # we run local synchronisation here
    - name: Sync terraform blueprint  # noqa: command-instead-of-module
      ansible.builtin.command: "rsync -avz {{ terraformbase_path }}/{{ terraform_blueprint }}/ {{ basepath }}/terraform"
      changed_when: true

    - name: Create local.env file
      ansible.builtin.template:
        src: local.env.j2
        dest: "{{ terraform_path }}/local.env"
        mode: "0644"
