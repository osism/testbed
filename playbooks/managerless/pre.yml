---
- name: Pre play
  hosts: all

  vars_files:
    - vars/repositories.yml

  vars:
    basepath: "{{ ansible_user_dir }}/src/{{ repositories['testbed']['path'] }}"
    cloud_env: managerless
    terraform_path: "{{ zuul.project.src_dir }}/terraform"
    terraform_version: "1.6.0"
    terraformbase_path: "{{ ansible_user_dir }}/src/{{ repositories['terraform-base']['path'] }}"

  tasks:
    - name: Install python
      ansible.builtin.include_role:
        name: "{{ item }}"
      loop:
        - ensure-python
        - ensure-pip

    - name: Install docker
      ansible.builtin.include_role:
        name: ensure-docker

    - name: Install required packages
      become: true
      ansible.builtin.package:
        name: "{{ item }}"
      loop:
        - ansible
        - docker-compose-plugin
        - unzip

    - name: Install terraform
      ansible.builtin.include_role:
        name: ensure-terraform

    - name: Copy terraform binary
      become: true
      ansible.builtin.copy:
        src: "{{ ansible_user_dir }}/.local/bin/terraform"
        dest: "/usr/bin/terraform"
        mode: 0755
        remote_src: true

    - name: Install python requirements
      become: true
      ansible.builtin.pip:
        name: "{{ item }}"
      loop:
        - openstacksdk

    - name: Install ansible collections
      ansible.builtin.command: |
        ansible-galaxy collection install {{ item }}
      loop:
        - osism.commons
        - osism.services
      changed_when: true

    # we run local synchronisation here
    - name: Sync terraform blueprint  # noqa: command-instead-of-module
      ansible.builtin.command: "rsync -avz {{ terraformbase_path }}/{{ terraform_blueprint }}/ {{ basepath }}/terraform"
      changed_when: true

    - name: Write clouds.yaml file
      ansible.builtin.copy:
        content: "{{ secret.MANAGERLESS_CREDENTIALS }}"
        dest: "{{ terraform_path }}/clouds.yaml"
        mode: 0600
      no_log: true

    - name: Clean the cloud environment
      ansible.builtin.shell:
        cmd: |
          OS_CLOUD={{ cloud_env }} python3 scripts/cleanup.py
        chdir: "{{ terraform_path }}"
      failed_when: false
      changed_when: true
