---
- name: Pre play
  hosts: all

  vars_files:
    - vars/repositories.yml

  vars:
    basepath: "{{ ansible_user_dir }}/src/{{ repositories['testbed']['path'] }}"
    create_infrastructure: true
    terraform_path: "{{ zuul.project.src_dir }}/terraform"
    terraformbase_path: "{{ ansible_user_dir }}/src/{{ repositories['terraform-base']['path'] }}"

  tasks:
    - name: Install python
      ansible.builtin.include_role:
        name: ensure-pip

    - name: Install docker
      ansible.builtin.include_role:
        name: ensure-docker

    - name: Install required packages
      become: true
      ansible.builtin.package:
        name: "{{ item }}"
      loop:
        - python3-netifaces
        - sshuttle
        - unzip

    - name: Copy terraform binary
      become: true
      ansible.builtin.copy:
        src: "{{ ansible_user_dir }}/.local/bin/terraform"
        dest: "/usr/bin/terraform"
        mode: 0755
        remote_src: true

    - name: Install python requirements
      become: true
      ansible.builtin.pip:
        name: "{{ item }}"
      loop:
        - ansible
        - ansible-core
        - openstacksdk
        - python-gilt

    - name: Install ansible collections
      ansible.builtin.command: |
        ansible-galaxy collection install {{ item }}
      loop:
        - osism.commons
        - osism.services
      changed_when: true

    # we run local synchronisation here
    - name: Sync terraform blueprint  # noqa: command-instead-of-module
      ansible.builtin.command: "rsync -avz {{ terraformbase_path }}/{{ terraform_blueprint }}/ {{ basepath }}/terraform"
      changed_when: true

    - name: Write clouds.yaml file
      ansible.builtin.copy:
        content: "{{ secret.MANAGERLESS_CREDENTIALS }}"
        dest: "{{ terraform_path }}/clouds.yaml"
        mode: 0600
      no_log: true
      when:
        - create_infrastructure | bool

    - name: Clean the cloud environment
      ansible.builtin.shell:
        cmd: |
          OS_CLOUD={{ cloud_env }} python3 scripts/cleanup.py
        chdir: "{{ terraform_path }}"
      failed_when: false
      changed_when: true
      when:
        - create_infrastructure | bool

    - name: Copy local deploy playbooks
      ansible.builtin.copy:
        src: "{{ zuul.project.src_dir }}/playbooks/managerless/files/{{ item }}"
        remote_src: true
        dest: "/tmp/{{ item }}"
        mode: 0644
      loop:
        - managerless-part-1.yml
        - managerless-part-2.yml
        - managerless-part-3.yml
        - managerless-part-4.yml
        - managerless-part-5.yml

    # Because of remote_src it is not possible to use ansible.builtin.template for this task
    - name: Set cloud_env in managerless-part-3.yml
      ansible.builtin.command:  # noqa: command-instead-of-module
        cmd: "sed -i 's/cloud_env: .*/cloud_env: {{ cloud_env }}/g' /tmp/managerless-part-3.yml"
      changed_when: true

    - name: Set cloud_env in managerless-part-4.yml
      ansible.builtin.command:  # noqa: command-instead-of-module
        cmd: "sed -i 's/cloud_env: .*/cloud_env: {{ cloud_env }}/g' /tmp/managerless-part-4.yml"
      changed_when: true

- name: Create infrastructure
  hosts: all

  vars:
    create_infrastructure: true

    terraform_path: "{{ zuul.project.src_dir }}/terraform"

    node_0_address_file: "{{ terraform_path }}/.NODE_0_ADDRESS.{{ cloud_env }}"
    node_1_address_file: "{{ terraform_path }}/.NODE_1_ADDRESS.{{ cloud_env }}"
    node_2_address_file: "{{ terraform_path }}/.NODE_2_ADDRESS.{{ cloud_env }}"

  tasks:
    - name: Create infrastructure
      ansible.builtin.command:
        chdir: "{{ terraform_path }}"
        cmd: make ENVIRONMENT={{ cloud_env }} create
      changed_when: true
      when:
        - create_infrastructure | bool

    - name: Fetch node_0_host address
      ansible.builtin.command: cat "{{ node_0_address_file }}"
      register: node_0_address
      changed_when: true
      when:
        - create_infrastructure | bool

    - name: Fetch node_1_host address
      ansible.builtin.command: cat "{{ node_1_address_file }}"
      register: node_1_address
      changed_when: true
      when:
        - create_infrastructure | bool

    - name: Fetch node_2_host address
      ansible.builtin.command: cat "{{ node_2_address_file }}"
      register: node_2_address
      changed_when: true
      when:
        - create_infrastructure | bool

    - name: Set node_0_host fact
      ansible.builtin.set_fact:
        node_0_host: "{{ node_0_address.stdout | split('=') | last }}"
      when:
        - create_infrastructure | bool

    - name: Set node_1_host fact
      ansible.builtin.set_fact:
        node_1_host: "{{ node_1_address.stdout | split('=') | last }}"
      when:
        - create_infrastructure | bool

    - name: Set node_2_host fact
      ansible.builtin.set_fact:
        node_2_host: "{{ node_2_address.stdout | split('=') | last }}"
      when:
        - create_infrastructure | bool

    - name: Wait up to 300 seconds for port 22 to become open and contain "OpenSSH"
      ansible.builtin.wait_for:
        port: 22
        host: "{{ item }}"
        search_regex: OpenSSH
        delay: 10
        timeout: 300
      loop:
        - "{{ node_0_host }}"
        - "{{ node_1_host }}"
        - "{{ node_2_host }}"
      when:
        - create_infrastructure | bool

    - name: Fetch ssh hostkeys
      ansible.builtin.shell: "ssh-keyscan {{ item }} >> {{ ansible_user_dir }}/.ssh/known_hosts"
      changed_when: true
      loop:
        - "{{ node_0_host }}"
        - "{{ node_1_host }}"
        - "{{ node_2_host }}"
      when:
        - create_infrastructure | bool

    - name: Get ssh keypair from terraform environment
      ansible.builtin.shell:
        chdir: "{{ zuul.project.src_dir }}"
        cmd: cp terraform/.id* .
      changed_when: true
      when:
        - create_infrastructure | bool

- name: Create configuration repository
  hosts: all

  vars:
    operator_group: dragon
    operator_user: dragon

  tasks:
    - name: Run managerless part 1
      ansible.builtin.command: |
        ansible-playbook -i localhost, /tmp/managerless-part-1.yml
      changed_when: true

    - name: Install ansible collections
      become: true
      become_user: "{{ operator_user }}"
      ansible.builtin.command: |
        ansible-galaxy collection install {{ item }}
      loop:
        - osism.commons
        - osism.services
      changed_when: true

    - name: Create configuration directory
      become: true
      ansible.builtin.file:
        state: directory
        path: /opt/configuration
        mode: '0755'
        owner: "{{ operator_user }}"

    # we run local synchronisation here
    - name: Sync configuration repository  # noqa: command-instead-of-module
      become: true
      ansible.builtin.command: "rsync -avz {{ zuul.project.src_dir }}/ /opt/configuration"
      changed_when: true

    - name: Change ownership of /opt/configuration
      become: true
      ansible.builtin.file:
        path: /opt/configuration
        owner: "{{ operator_user }}"
        group: "{{ operator_group }}"
        recurse: true
