---
- name: Deploy testbed
  ansible.builtin.import_playbook: deploy.yml
  vars:
    version_ceph: "{{ ceph_version | default('pacific') }}"
    version_manager: "{{ manager_version | default('latest') }}"
    version_openstack: "{{ openstack_version | default('xena') }}"

- name: Upgrade testbed
  hosts: all

  vars:
    basepath: "{{ ansible_user_dir }}/src/github.com/osism/testbed"

    version_ceph_next: "{{ ceph_version_next | default('pacific') }}"
    version_manager_next: "{{ manager_version_next | default('latest') }}"
    version_openstack_next: "{{ openstack_version_next | default('yoga') }}"

  vars_files:
    - vars/cloud_envs.yml

  tasks:
    - name: Set cloud_env fact (Zuul deployment)
      ansible.builtin.set_fact:
        cloud_env: "{{ cloud_envs[hostvars[groups['all'][0]]['nodepool']['label']] }}"
      when: "'nodepool' in hostvars[groups['all'][0]]"

    - name: Set cloud_env fact (local deployment)
      ansible.builtin.set_fact:
        cloud_env: "{{ testbed_environment | default('ci') }}"
      when: "'nodepool' not in hostvars[groups['all'][0]]"

    - name: Run upgrade
      ansible.builtin.command:
        chdir: "{{ basepath }}/terraform"
        cmd: make ENVIRONMENT={{ cloud_env }} VERSION_MANAGER={{ version_manager_next }} VERSION_CEPH={{ version_ceph_next }} VERSION_OPENSTACK={{ version_openstack_next }} upgrade

    - name: Run checks after the upgrade
      ansible.builtin.command:
        chdir: "{{ basepath }}/terraform"
        cmd: make ENVIRONMENT={{ cloud_env }} check
