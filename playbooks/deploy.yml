---
- name: Deploy testbed
  hosts: all

  vars_files:
    - vars/cloud_envs.yml
    - vars/repositories.yml

  vars:
    ansible_galaxy: ~/venv/bin/ansible-galaxy
    ansible_path: "{{ basepath }}/ansible"
    ansible_playbook: ~/venv/bin/ansible-playbook
    basepath: "{{ ansible_user_dir }}/src/{{ repositories['testbed']['path'] }}"
    manager_address_file: "{{ terraform_path }}/.MANAGER_ADDRESS.{{ cloud_env }}"
    repo_path: "{{ ansible_user_dir }}/src/{{ repository_server }}"

    manual_create: false
    manual_deploy: false

    run_bootstrap: true
    run_checks: true

    terraform_binary: "{{ ansible_user_dir }}/terragrunt"
    terraform_path: "{{ basepath }}/terraform"

    _ceph_version: "{{ ceph_version | default('quincy') }}"
    _manager_version: "{{ manager_version | default('latest') }}"
    _openstack_version: "{{ openstack_version | default('2023.2') }}"

    _nutshell: "{{ nutshell | default(false) | bool }}"
    _tempest: "{{ tempest | default(false) | bool }}"

    _ceph_stack: "{{ ceph_stack | default('ceph-ansible') }}"

  tasks:
    - name: Set facts (Zuul deployment)
      ansible.builtin.set_fact:
        _is_zuul: true
        cloud_env: "{{ cloud_envs[hostvars[groups['all'][0]]['nodepool']['label']] }}"
        terragrunt_tfpath: "{{ ansible_user_dir }}/terraform"
      when: "'nodepool' in hostvars[groups['all'][0]]"

    - name: Set facts (local deployment)
      ansible.builtin.set_fact:
        _is_zuul: false
        cloud_env: "{{ testbed_environment | default('ci') }}"
        terragrunt_tfpath: terraform
      when: "'nodepool' not in hostvars[groups['all'][0]]"

    - name: Create infrastructure (latest)
      ansible.builtin.command:
        chdir: "{{ terraform_path }}"
        cmd: make ENVIRONMENT={{ cloud_env }} TERRAFORM={{ terraform_binary }} VERSION_CEPH={{ _ceph_version }} VERSION_MANAGER={{ _manager_version }} VERSION_OPENSTACK={{ _openstack_version }} TEMPEST={{ _tempest | lower }} IS_ZUUL={{ _is_zuul | lower }} CEPH_STACK={{ _ceph_stack }} create create
      when:
        - not manual_create | bool
        - _manager_version == "latest"
      changed_when: true
      environment:
        TERRAGRUNT_TFPATH: "{{ terragrunt_tfpath }}"

    - name: Create infrastructure (stable)
      ansible.builtin.command:
        chdir: "{{ terraform_path }}"
        cmd: make ENVIRONMENT={{ cloud_env }} TERRAFORM={{ terraform_binary }} VERSION_MANAGER={{ _manager_version }} TEMPEST={{ _tempest | lower }} IS_ZUUL={{ _is_zuul | lower }} CEPH_STACK={{ _ceph_stack }} create
      when:
        - not manual_create | bool
        - _manager_version != "latest"
      changed_when: true
      environment:
        TERRAGRUNT_TFPATH: "{{ terragrunt_tfpath }}"

    - name: Fetch manager_host address
      ansible.builtin.command: cat "{{ manager_address_file }}"
      register: manager_address
      changed_when: false

    - name: Set manager_host address
      ansible.builtin.set_fact:
        manager_host: "{{ manager_address.stdout | split('=') | last }}"

    - name: Update ansible collections
      ansible.builtin.command:
        chdir: "{{ ansible_user_dir }}"
        cmd: |
          {{ ansible_galaxy }} collection install --force "{{ repo_path }}/osism/ansible-collection-{{ item }}"
      loop:
        - commons
        - services
      changed_when: true

    - name: Wait up to 300 seconds for port 22 to become open and contain "OpenSSH"
      ansible.builtin.wait_for:
        port: 22
        host: "{{ manager_host }}"
        search_regex: OpenSSH
        delay: 10
        timeout: 300

    - name: Wait a little longer for the manager so that everything is ready
      ansible.builtin.pause:
        seconds: 60

    - name: Fetch manager ssh hostkey
      ansible.builtin.shell: "ssh-keyscan {{ manager_host }} >> {{ ansible_user_dir }}/.ssh/known_hosts"
      changed_when: true

    - name: Get ssh keypair from terraform environment
      ansible.builtin.shell:
        chdir: "{{ ansible_path }}"
        cmd: cp {{ terraform_path }}/.id* .
      changed_when: true

    - name: Point out that the following task takes some time and does not give any output
      ansible.builtin.debug:
        msg: "The task 'Run manager part 0' runs an Ansible playbook on the manager. There is no further output of this here. It takes a few minutes for this task to complete."

    - name: Run manager part 0
      ansible.builtin.shell:
        chdir: "{{ ansible_path }}"
        cmd: |
          {{ ansible_playbook }} -i {{ terraform_path }}/inventory.{{ cloud_env }} --key-file {{ terraform_path }}/.id_rsa.{{ cloud_env }} manager-part-0.yml -e cloud_env={{ cloud_env }} -e repo_path={{ repo_path }}
      changed_when: true

    - name: Point out that the log in on the manager is now possible
      ansible.builtin.debug:
        msg: "It is now already possible to log in to the manager with 'make login'."

    - name: Point out that the following task takes some time and does not give any output
      ansible.builtin.debug:
        msg: "The task 'Run manager part 1 + 2' runs an Ansible playbook on the manager. There is no further output of this here. It takes a few minuts for this task to complete."

    - name: Run manager part 1 + 2
      ansible.builtin.shell:
        chdir: "{{ ansible_path }}"
        cmd: |
          {{ ansible_playbook }} -i {{ terraform_path }}/inventory.{{ cloud_env }} --key-file {{ terraform_path }}/.id_rsa.{{ cloud_env }} manager-part-1.yml -e cloud_env={{ cloud_env }} -e repo_path={{ repo_path }} -e version_manager={{ _manager_version }} -e is_zuul={{ _is_zuul }}
      changed_when: true

    - name: Reboot manager
      ansible.builtin.command:
        cmd: "ssh -i {{ terraform_path }}/.id_rsa.{{ cloud_env }} dragon@{{ manager_host }} sudo shutdown -r now"
      changed_when: true
      failed_when: false

    - name: Wait up to 300 seconds for port 22 to become open and contain "OpenSSH"
      ansible.builtin.wait_for:
        port: 22
        host: "{{ manager_host }}"
        search_regex: OpenSSH
        delay: 10
        timeout: 300

    - name: Wait a little longer for the manager so that everything is ready
      ansible.builtin.pause:
        seconds: 60

    - name: Deploy manager + bootstrap nodes
      ansible.builtin.command:
        cmd: "ssh -i {{ terraform_path }}/.id_rsa.{{ cloud_env }} dragon@{{ manager_host }} /opt/configuration/scripts/deploy-manager.sh"
      when: not manual_deploy | bool
      changed_when: true

    - name: Deploy services
      ansible.builtin.command:
        cmd: "ssh -i {{ terraform_path }}/.id_rsa.{{ cloud_env }} dragon@{{ manager_host }} /opt/configuration/scripts/deploy-services.sh"
      when:
        - not manual_deploy | bool
        - not _nutshell | bool
      changed_when: true

    - name: Deploy in a nutshell
      ansible.builtin.command:
        cmd: "ssh -i {{ terraform_path }}/.id_rsa.{{ cloud_env }} dragon@{{ manager_host }} /opt/configuration/scripts/deploy-in-a-nutshell.sh"
      when:
        - not manual_deploy | bool
        - _nutshell | bool
      changed_when: true

    - name: Bootstrap services
      ansible.builtin.command:
        cmd: "ssh -i {{ terraform_path }}/.id_rsa.{{ cloud_env }} dragon@{{ manager_host }} /opt/configuration/scripts/bootstrap.sh"
      when:
        - not manual_deploy | bool
        - run_bootstrap | bool
      changed_when: true

    - name: Run checks
      ansible.builtin.command:
        cmd: "ssh -i {{ terraform_path }}/.id_rsa.{{ cloud_env }} dragon@{{ manager_host }} /opt/configuration/scripts/check.sh"
      when:
        - not manual_deploy | bool
        - run_checks | bool
      changed_when: true

    - name: Run tempest
      ansible.builtin.command:
        cmd: "ssh -i {{ terraform_path }}/.id_rsa.{{ cloud_env }} dragon@{{ manager_host }} /opt/configuration/scripts/check/302-openstack-tempest.sh"
      when:
        - not manual_deploy | bool
        - _tempest | bool
      changed_when: true
