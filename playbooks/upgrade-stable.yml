---
- name: Deploy testbed
  ansible.builtin.import_playbook: deploy.yml
  vars:
    version_manager: "{{ manager_version | default('latest') }}"
    namespace_kolla: "{{ docker_namespace_kolla | default('kolla') }}"

    run_bootstrap: false

- name: Upgrade testbed
  hosts: all

  vars:
    basepath: "{{ ansible_user_dir }}/src/github.com/osism/testbed"
    terraform_path: "{{ basepath }}/terraform"

    version_manager_next: "{{ manager_version_next | default('latest') }}"
    version_ceph_next: "{{ ceph_version_next | default('quincy') }}"
    version_openstack_next: "{{ openstack_version_next | default('zed') }}"
    namespace_kolla_next: "{{ docker_namespace_kolla_next | default('kolla') }}"

    run_bootstrap: true
    run_checks: true

  vars_files:
    - vars/cloud_envs.yml

  tasks:
    - name: Set cloud_env fact (Zuul deployment)
      ansible.builtin.set_fact:
        cloud_env: "{{ cloud_envs[hostvars[groups['all'][0]]['nodepool']['label']] }}"
      when: "'nodepool' in hostvars[groups['all'][0]]"

    - name: Set cloud_env fact (local deployment)
      ansible.builtin.set_fact:
        cloud_env: "{{ testbed_environment | default('ci') }}"
      when: "'nodepool' not in hostvars[groups['all'][0]]"

    - name: Run upgrade
      ansible.builtin.command:
        chdir: "{{ terraform_path }}"
        cmd: make ENVIRONMENT={{ cloud_env }} VERSION_MANAGER={{ version_manager_next }} VERSION_CEPH={{ version_ceph_next }} VERSION_OPENSTACK={{ version_openstack_next }} KOLLA_NAMESPACE={{ namespace_kolla_next }} upgrade
      changed_when: true

    - name: Bootstrap services
      ansible.builtin.command:
        chdir: "{{ terraform_path }}"
        cmd: make ENVIRONMENT={{ cloud_env }} bootstrap
      when: run_bootstrap | bool
      changed_when: true

    - name: Run checks after the upgrade
      ansible.builtin.command:
        chdir: "{{ terraform_path }}"
        cmd: make ENVIRONMENT={{ cloud_env }} check
      when: run_checks | bool
      changed_when: true
