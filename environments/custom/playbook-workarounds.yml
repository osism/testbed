---
- name: Group hosts based on configuration
  hosts: all
  gather_facts: false

  tasks:
    - name: Group hosts based on virtualization_role
      ansible.builtin.group_by:
        key: "{{ item }}"
      with_items:
        - virtualization_role_{{ ansible_virtualization_role }}
      tags: always

# NOTE: The netplan apply call is made separately and not via the osism.commons.network role in order
#       to keep the default configuration in the testbed. In the default configuration, network restarts
#       are deactivated.

- name: Apply netplan configuration on the manager node
  hosts: manager
  gather_facts: false

  tasks:
    - name: Apply netplan configuration
      become: true
      ansible.builtin.command: netplan apply
      changed_when: false
      failed_when: false  # netplan apply can lead to disconnections, ignore them

- name: Apply netplan configuration on all other nodes
  hosts: all:!manager
  gather_facts: false

  tasks:
    - name: Apply netplan configuration
      become: true
      ansible.builtin.command: netplan apply
      changed_when: false
      failed_when: false  # netplan apply can lead to disconnections, ignore them

- name: Add custom CA certificates to non-manager nodes
  hosts: all:!manager
  gather_facts: false

  tasks:
    - name: Copy custom CA certificates
      become: true
      ansible.builtin.copy:
        src: "{{ item }}"
        dest: /usr/local/share/ca-certificates/
        mode: 0644
        owner: root
      with_fileglob:
        - "/opt/configuration/environments/kolla/certificates/ca/*.crt"

    - name: Run update-ca-certificates
      become: true
      ansible.builtin.command: update-ca-certificates
      changed_when: true
      when: ansible_os_family == 'Debian'

    - name: Run update-ca-trust
      become: true
      ansible.builtin.command: update-ca-trust
      changed_when: true
      when: ansible_os_family == 'RedHat'

- name: Add a workaround service to non-manager nodes
  hosts: all:!manager
  gather_facts: false

  tasks:
    - name: Copy workarounds.sh scripts
      become: true
      ansible.builtin.template:
        src: workarounds.sh.j2
        dest: /usr/local/bin/workarounds.sh
        mode: 0755
        owner: root
        group: root

    - name: Copy workarounds systemd unit file
      become: true
      ansible.builtin.template:
        src: workarounds.service.j2
        dest: /etc/systemd/system/workarounds.service
        mode: 0644
        owner: root
        group: root

    - name: Reload systemd daemon
      become: true
      ansible.builtin.systemd:
        daemon_reload: true

    - name: Enable workarounds.service
      become: true
      ansible.builtin.service:
        name: workarounds
        enabled: true

# https://github.com/docker/docker-py/issues/3113
# docker.errors.DockerException: Error while fetching server API version:
# HTTPConnection.request() got an unexpected keyword argument 'chunked'

- name: On Ubuntu 24.04 Install python3-docker from Debian Sid
  hosts: all
  gather_facts: false

  tasks:
    - name: Install python3-docker
      become: true
      ansible.builtin.apt:
        deb: http://ftp.de.debian.org/debian/pool/main/p/python-docker/python3-docker_7.1.0-1_all.deb
      when:
        - "ansible_distribution == 'Ubuntu'"
        - "ansible_distribution_version is version('24.04', '>=')"

# testing: should be implemented to network role in ansible-collection-commons
# vxlan interface needed by /opt/configuration/scripts/deploy/200-infrastructure-services.sh

- name: Set up persistent vxlan0 interface on CentOS
  hosts: all:!manager
  gather_facts: true
  become: true

  tasks:
    - name: Get IP address of management interface
      ansible.builtin.set_fact:
        management_ip: "{{ ansible_facts[ansible_local.testbed_network_devices.management]['ipv4']['address'] }}"

    - name: Debug management interface and IP
      ansible.builtin.debug:
        msg:
          - "Management interface: {{ ansible_local.testbed_network_devices.management }}"
          - "Management IP: {{ management_ip }}"

    - name: Create vxlan0 setup script
      ansible.builtin.copy:
        dest: /usr/local/bin/setup-vxlan0.sh
        content: |
          #!/bin/bash
          ip link add vxlan0 type vxlan id 42 dev {{ ansible_local.testbed_network_devices.management }} dstport 4789
          ip link set vxlan0 up
        mode: '0755'

    - name: Create systemd service for vxlan0 setup
      ansible.builtin.copy:
        dest: /etc/systemd/system/vxlan0-setup.service
        content: |
          [Unit]
          Description=Setup VXLAN0 interface
          After=network.target

          [Service]
          Type=oneshot
          ExecStart=/usr/local/bin/setup-vxlan0.sh

          [Install]
          WantedBy=multi-user.target
        mode: '0644'

    - name: Enable and start vxlan0-setup service
      ansible.builtin.systemd:
        name: vxlan0-setup
        enabled: yes
        state: started
        daemon_reload: yes

    - name: Create systemd-networkd configuration for vxlan0
      ansible.builtin.copy:
        dest: /etc/systemd/network/vxlan0.network
        content: |
          [Match]
          Name=vxlan0

          [Network]
          DHCP=yes
        mode: '0644'

    - name: Restart systemd-networkd
      ansible.builtin.systemd:
        name: systemd-networkd
        state: restarted

    - name: Wait for systemd-networkd to settle
      ansible.builtin.pause:
        seconds: 10

    - name: Debug vxlan0 interface status
      ansible.builtin.command: ip addr show vxlan0
      register: vxlan_status
      changed_when: false

    - name: Display vxlan0 interface status
      ansible.builtin.debug:
        var: vxlan_status.stdout_lines

# testing: needed by /opt/configuration/scripts/deploy/100-ceph-services.sh on CentOS
#- name: Ensure Podman is Installed on CentOS Testbed Nodes
#  hosts: all:!manager
#  gather_facts: true
#  become: true
#
#  tasks:
#    - name: Ensure Podman is installed
#      ansible.builtin.dnf:
#        name: podman
#        state: present
#      when: ansible_facts['os_family'] == 'RedHat' and ansible_facts['distribution'] == 'CentOS'
