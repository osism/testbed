---
- name: Bootstrap baremetal resources
  hosts: testbed-control-nodes
  vars:
    ironic_network_interface: ironic-boot
  tasks:
    - name: Create public network
      delegate_to: localhost
      run_once: true
      openstack.cloud.network:
        cloud: admin
        state: present
        name: public
        external: false
        provider_network_type: flat
        provider_physical_network: physnet1
        mtu: 1342  # NOTE: necessary because VxLAN in Geneve/VxLAN
      register: public_network

    - name: Create public subnet
      delegate_to: localhost
      run_once: true
      openstack.cloud.subnet:
        cloud: admin
        state: present
        name: public
        network_name: public
        cidr: 192.168.112.0/20
        enable_dhcp: true
        allocation_pool_start: 192.168.112.100
        allocation_pool_end: 192.168.112.200
        gateway_ip: 192.168.112.5
      register: public_subnet

    - name: Create Ironic boot port security group
      delegate_to: localhost
      run_once: true
      openstack.cloud.security_group:
        cloud: admin
        state: present
        name: ironic-boot-port
      register: ironic_sec_grp

    - name: Add rules for security groups
      delegate_to: localhost
      run_once: true
      openstack.cloud.security_group_rule:
        cloud: admin
        security_group: "{{ ironic_sec_grp.security_group.id }}"
        protocol: "{{ item.protocol }}"
        port_range_min: "{{ item.min_port | default(omit) }}"
        port_range_max: "{{ item.max_port | default(omit) }}"
        ethertype: "IPv{{ public_subnet.subnet.ip_version }}"
      loop:
        - protocol: icmp
        - protocol: udp
          min_port: 69
          max_port: 69
        - protocol: tcp
          min_port: 8089
          max_port: 8089

    - name: Create ports for Ironic tftpd/httpd nodes
      delegate_to: localhost
      openstack.cloud.port:
        cloud: admin
        state: present
        network: "{{ public_network.network.id }}"
        security_groups: "{{ ironic_sec_grp.security_group.id }}"
        device_owner: 'ironic:boot'
        name: "ironic-listen-port-{{ inventory_hostname }}"
      register: ironic_port

    # ansible os_port module does not support 'host' parameter, but we need set the port's host
    # value to loop_var, once os_port support this parameter, remove the task below
    # https://docs.ansible.com/ansible/latest/modules/os_port_module.html#parameters
    - name: Update Ironic tftpd/httpd port host_id
      delegate_to: localhost
      ansible.builtin.command: >
        openstack
        --os-cloud admin
        port set --host {{ inventory_hostname }} {{ ironic_port.port.id }}
      changed_when: true
      when:
        - ironic_port.port.binding_host_id != inventory_hostname

    - name: Check OVS ironic port
      ansible.builtin.command: >-
        docker exec openvswitch_vswitchd ovs-vsctl --columns external_ids --data json --format json list Interface {{ ironic_network_interface }}
      changed_when: false
      failed_when: false
      register: check_ovs_ironic_port

    - name: Add Ironic port to openvswitch br-int
      vars:
        ovs_interface_data: "{{ dict((check_ovs_ironic_port.stdout | from_json)['data'] | flatten(levels=2) | last) if check_ovs_ironic_port.rc == 0 else None }}"
      ansible.builtin.command: >
        docker exec openvswitch_vswitchd ovs-vsctl --may-exist \
        add-port br-int {{ ironic_network_interface }} \
        -- set Interface {{ ironic_network_interface }} type=internal \
        -- set Interface {{ ironic_network_interface }} external-ids:iface-status=active \
        -- set Interface {{ ironic_network_interface }} external-ids:attached-mac={{ ironic_port.port.mac_address }} \
        -- set Interface {{ ironic_network_interface }} external-ids:iface-id={{ ironic_port.port.id }} \
        -- set Interface {{ ironic_network_interface }} external-ids:skip_cleanup=true
      register: ovs_ironic_port
      changed_when: true
      failed_when: ovs_ironic_port.rc != 0
      when: >
        not ovs_interface_data
        or
        ovs_interface_data['iface-status'] != 'active'
        or
        ovs_interface_data['attached-mac'] != ironic_port.port.mac_address
        or
        ovs_interface_data['iface-id'] != ironic_port.port.id
        or
        ovs_interface_data['skip_cleanup'] != 'true'

    - name: Create ironic dhclient conf
      become: true
      ansible.builtin.copy:
        content: |
          request subnet-mask,broadcast-address,interface-mtu;
          do-forward-updates false;
        dest: /etc/dhcp/ironic-dhclient.conf
        mode: 0664
      notify: Restart ironic-interface.service

    - name: Create ironic-interface service
      become: True
      ansible.builtin.template:
        src: ironic-interface.service.j2
        dest: /etc/systemd/system/ironic-interface.service
        mode: 0644
      notify: Restart ironic-interface.service

    - name: Flush handlers
      ansible.builtin.meta: flush_handlers

    - name: Wait for ip to appear on interface {{ ironic_network_interface }}
      ansible.builtin.setup:
        gather_subset:
          - '!all'
          - '!min'
          - network
      until: ironic_port.port.fixed_ips[0].ip_address == ansible_facts[ironic_network_interface | replace('-', '_')]['ipv' + public_subnet.subnet.ip_version | string]['address']
      retries: 5
      delay: 2

  handlers:
    - name: Restart ironic-interface.service
      become: True
      ansible.builtin.systemd_service:
        name: ironic-interface.service
        daemon_reload: yes
        state: restarted
        enabled: yes
