---
- name: Keycloak - configure LDAP federation for Keystone
  hosts: manager
  gather_facts: false

  vars:
    # These generic variables are expected by the generic user.ldif.j2 template
    ldap_user: "{{ keycloak_ldap_user }}"
    ldap_binddn: "{{ keycloak_ldap_binddn }}"
    ldap_bindpw: "{{ keycloak_ldap_bindpw }}"

  tasks:
    - name: Wait until service is available
      ansible.builtin.command: >-
        docker exec {{ keycloak_service_container_name }} bash -c
          'until echo > "/dev/tcp/127.0.0.1/8080"
          do
            echo "Waiting until Keycloak service is available" && sleep 5;
          done'
      changed_when: false
      run_once: true

    - name: Log in to Keycloak
      ansible.builtin.command: >-
        docker exec {{ keycloak_service_container_name }} {{ keycloak_kcadm_binary }}
          config credentials --server "{{ keycloak_url }}/auth"
                             --realm master
                             --user "{{ keycloak_admin_id }}"
                             --password "{{ keycloak_admin_secret }}"
      changed_when: false
      run_once: true
      no_log: true

    - name: Get available realms
      ansible.builtin.command: >-
        docker exec {{ keycloak_service_container_name }} {{ keycloak_kcadm_binary }}
          get realms --fields id
      register: available_realms_json
      changed_when: false
      run_once: true

    - name: Filter available realms
      ansible.builtin.set_fact:
        available_realms: "{{ available_realms_json.stdout | from_json | map(attribute='id') | list }}"
      run_once: true

    - name: Create target realm if it doesn't exist
      ansible.builtin.command: >-
        docker exec {{ keycloak_service_container_name }} {{ keycloak_kcadm_binary }}
          create realms
            --set id="{{ keycloak_realm }}"
            --set realm="{{ keycloak_realm }}"
            --set enabled=true
      when: keycloak_realm not in available_realms
      run_once: true


    - name: Get available components in realm
      ansible.builtin.command: >-
        docker exec {{ keycloak_service_container_name }} {{ keycloak_kcadm_binary }}
          get components --target-realm {{ keycloak_realm }}
                --query name="{{ keycloak_ldap_storage_provider_component_name }}"
                --fields name
      register: available_components_json
      changed_when: false
      run_once: true


    - name: Filter available components in realm
      ansible.builtin.set_fact:
        available_components: "{{ available_components_json.stdout | from_json | map(attribute='name') | list }}"
      run_once: true


    - name: Add LDAP user storage provider component to realm
      ansible.builtin.command: >-
        docker exec {{ keycloak_service_container_name }} {{ keycloak_kcadm_binary }}
          create components --target-realm {{ keycloak_realm }}
            --set name="{{ keycloak_ldap_storage_provider_component_name }}"
            --set providerId=ldap
            --set providerType=org.keycloak.storage.UserStorageProvider
            --set parentId="{{ keycloak_realm }}"
            --set "config.pagination=[\"true\"]"
            --set "config.fullSyncPeriod=[\"-1\"]"
            --set "config.startTls=[\"false\"]"
            --set "config.connectionPooling=[\"true\"]"
            --set "config.usersDn=[\"{{ ldap_users }}\"]"
            --set "config.cachePolicy=[\"DEFAULT\"]"
            --set "config.useKerberosForPasswordAuthentication=[\"false\"]"
            --set "config.importEnabled=[\"false\"]"
            --set "config.enabled=[\"true\"]"
            --set "config.bindCredential=[\"{{ ldap_bindpw }}\"]"
            --set "config.bindDn=[\"{{ ldap_binddn }}\"]"
            --set "config.changedSyncPeriod=[\"-1\"]"
            --set "config.usernameLDAPAttribute=[\"uid\"]"
            --set "config.vendor=[\"other\"]"
            --set "config.uuidLDAPAttribute=[\"entryUUID\"]"
            --set "config.allowKerberosAuthentication=[\"false\"]"
            --set "config.connectionUrl=[\"{{ ldap_url }}\"]"
            --set "config.syncRegistrations=[\"false\"]"
            --set "config.authType=[\"simple\"]"
            --set "config.debug=[\"false\"]"
            --set "config.searchScope=[\"2\"]"
            --set "config.useTruststoreSpi=[\"ldapsOnly\"]"
            --set "config.usePasswordModifyExtendedOp=[\"true\"]"
            --set "config.trustEmail=[\"false\"]"
            --set "config.priority=[\"0\"]"
            --set "config.userObjectClasses=[\"inetOrgPerson, organizationalPerson\"]"
            --set "config.rdnLDAPAttribute=[\"uid\"]"
            --set "config.editMode=[\"READ_ONLY\"]"
            --set "config.validatePasswordPolicy=[\"false\"]"
            --set "config.batchSizeForSync=[\"1000\"]"
      when: keycloak_ldap_storage_provider_component_name not in available_components
      run_once: true
      no_log: true


    - name: Get LDAP provider id
      ansible.builtin.command: >-
        docker exec {{ keycloak_service_container_name }} {{ keycloak_kcadm_binary }}
          get "realms/{{ keycloak_realm }}/components"
            --query name="{{ keycloak_ldap_storage_provider_component_name }}"
            --fields id
      register: ldap_provider_id_json
      changed_when: false
      run_once: true


    - name: Filter LDAP provider id
      ansible.builtin.set_fact:
        ldap_provider_id: "{{ ldap_provider_id_json.stdout | from_json | map(attribute='id') }}"
      run_once: true


    - name: Get "first name" LDAP mapper id
      ansible.builtin.command: >-
        docker exec {{ keycloak_service_container_name }} {{ keycloak_kcadm_binary }}
          get "realms/{{ keycloak_realm }}/components"
            --query name="first name"
            --query providerId="user-attribute-ldap-mapper"
            --query parentId="{{ ldap_provider_id }}"
            --fields id
            --format csv
            --noquotes
      register: first_name_mapper_id_json
      changed_when: false
      run_once: true


    - name: Filter "first name" LDAP mapper id
      ansible.builtin.set_fact:
        first_name_mapper_id: "{{ first_name_mapper_id_json.stdout }}"
      run_once: true


    # Map LDAP attribute givenName to user.model.attribute "firstName"
    - name: Add first name mapper to LDAP storage provider
      ansible.builtin.command: >-
        docker exec {{ keycloak_service_container_name }} {{ keycloak_kcadm_binary }}
          update "realms/{{ keycloak_realm }}/components/{{ first_name_mapper_id }}"
            --set providerId=user-attribute-ldap-mapper
            --set providerType=org.keycloak.storage.ldap.mappers.LDAPStorageMapper
            --set 'config."ldap.attribute"=["givenName"]'
            --set 'config."is.mandatory.in.ldap"=["false"]'
      changed_when: false
      run_once: true


    - name: Get e-mail LDAP mapper id
      ansible.builtin.command: >-
        docker exec {{ keycloak_service_container_name }} {{ keycloak_kcadm_binary }}
          get "realms/{{ keycloak_realm }}/components"
            --query name="email"
            --query providerId="user-attribute-ldap-mapper"
            --query parentId="{{ ldap_provider_id }}"
            --fields id
            --format csv
            --noquotes
      register: email_mapper_id_json
      changed_when: false
      run_once: true


    - name: Filter e-mail LDAP mapper id
      ansible.builtin.set_fact:
        email_mapper_id: "{{ email_mapper_id_json.stdout }}"
      run_once: true


    # Map LDAP attribute mailPrimaryAddress to user.model.attribute "email"
    - name: Add e-mail mapper to LDAP storage provider
      ansible.builtin.command: >-
        docker exec {{ keycloak_service_container_name }} {{ keycloak_kcadm_binary }}
          update "realms/{{ keycloak_realm }}/components/{{ email_mapper_id }}"
            --set providerId=user-attribute-ldap-mapper
            --set providerType=org.keycloak.storage.ldap.mappers.LDAPStorageMapper
            --set 'config."ldap.attribute"=["mailPrimaryAddress"]'
      changed_when: false
      run_once: true


    # Check if openstack-default-project mapper exists
    - name: Get the openstack-default-project mapper ID
      ansible.builtin.command: >-
        docker exec {{ keycloak_service_container_name }} {{ keycloak_kcadm_binary }}
          get "realms/{{ keycloak_realm }}/components"
            --query name="openstack-default-project"
            --query providerId="hardcoded-attribute-mapper"
            --query parentId="{{ ldap_provider_id }}"
            --fields id
            --format csv
            --noquotes
      register: project_mapper_id_json
      changed_when: false
      run_once: true


    - name: Filter openstack-default-project mapper ID
      ansible.builtin.set_fact:
        project_mapper_id: "{{ project_mapper_id_json.stdout }}"
      run_once: true

    # Create openstack-default-project if it doesn't exist
    # and have it unconditionally map to the "admin" project
    - name: Add openstack-default-project mapper to LDAP storage provider
      ansible.builtin.command: >-
        docker exec {{ keycloak_service_container_name }} {{ keycloak_kcadm_binary }}
          create "realms/{{ keycloak_realm }}/components"
            --set name="openstack-default-project"
            --set parentId="{{ ldap_provider_id[0] }}"
            --set providerId=hardcoded-attribute-mapper
            --set providerType=org.keycloak.storage.ldap.mappers.LDAPStorageMapper
            --set 'config."user.model.attribute"=["openstack-default-project"]'
            --set 'config."attribute.value"=["admin"]'
      when: not project_mapper_id
      run_once: true


    # Check if openstack-user-domain mapper exists
    - name: Get the openstack-user-domain mapper ID
      ansible.builtin.command: >-
        docker exec {{ keycloak_service_container_name }} {{ keycloak_kcadm_binary }}
          get "realms/{{ keycloak_realm }}/components"
            --query name="openstack-user-domain"
            --query providerId="hardcoded-attribute-mapper"
            --query parentId="{{ ldap_provider_id }}"
            --fields id
            --format csv
            --noquotes
      register: domain_mapper_id_json
      changed_when: false
      run_once: true


    - name: Filter openstack-user-domain mapper ID
      ansible.builtin.set_fact:
        domain_mapper_id: "{{ domain_mapper_id_json.stdout }}"
      run_once: true

    # Create openstack-user-domain if it doesn't exist
    # and have it unconditionally map to the "default" domain
    - name: Add openstack-user-domain mapper to LDAP storage provider
      ansible.builtin.command: >-
        docker exec {{ keycloak_service_container_name }} {{ keycloak_kcadm_binary }}
          create "realms/{{ keycloak_realm }}/components"
            --set name="openstack-user-domain"
            --set parentId="{{ ldap_provider_id[0] }}"
            --set providerId=hardcoded-attribute-mapper
            --set providerType=org.keycloak.storage.ldap.mappers.LDAPStorageMapper
            --set 'config."user.model.attribute"=["openstack-user-domain"]'
            --set 'config."attribute.value"=["default"]'
      when: not domain_mapper_id
      run_once: true

    - name: Get Keycloak's LDAP user
      ansible.builtin.command: >-
        docker exec -i {{ openldap_service_container_name }}
          slapcat -f /etc/ldap/slapd.conf
                  -b "{{ ldap_binddn }}"
                  -H "ldap:///{{ ldap_binddn }}??base"
      register: ldap_user_json
      changed_when: false
      run_once: true

    - name: Filter LDAP users
      ansible.builtin.set_fact:
        available_users:
          "{{ ldap_user_json.stdout.split('\n')
              | select('match', 'dn: .*')
              | map('replace', 'dn: ', '')
              | list }}"
      run_once: true


    # Provision the LDAP user which will be used by Keycloak
    # If it doesn't exist yet
    - name: Add Keycloak's LDAP user
      ansible.builtin.shell: >-
        set -o pipefail &&
        echo "{{ lookup('template', './files/openldap/user.ldif.j2') }}" |
          docker exec -i {{ openldap_service_container_name }} \
            slapadd -f /etc/ldap/slapd.conf
      args:
        executable: /usr/bin/bash
      when: ldap_binddn not in available_users
      run_once: true
