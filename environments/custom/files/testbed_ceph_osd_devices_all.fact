#!/usr/bin/env python3

from dotenv import load_dotenv
import json
import os
from subprocess import PIPE, run

# NOTE: Get the partition on which the / fileysystem is located.
#       inspired by https://bootlin.com/blog/find-root-device/
result = run(
    "stat / | grep Device | awk '{print $2}' | awk -F/ '{print $1}'",
    stdout=PIPE,
    stderr=PIPE,
    universal_newlines=True,
    shell=True,
)

try:
    # Ubuntu <= 22.04
    # e.g. "Device: 801h/2049d  Inode: 2           Links: 19"
    major, minor = divmod(int(result.stdout.strip()[:-1], base=16), 0x100)
except ValueError:
    # Ubuntu >= 24.04
    # e.g. "Device: 8,1 Inode: 2           Links: 21"
    major, minor = result.stdout.strip().split(",")

load_dotenv(f"/sys/dev/block/{major}:{minor}/uevent")
partition = os.environ.get("DEVNAME")

# NOTE: Get the block device on which the partition of the / fileysystem
#       is located.
result = run(
    f"basename $(readlink -f '/sys/class/block/{partition}/..')",
    stdout=PIPE,
    stderr=PIPE,
    universal_newlines=True,
    shell=True,
)
root = result.stdout.strip()

# NOTE: Get all block devices that are present except the block device
#       on which the / filesystem is located.
#
# NOTE: OTC is treated specifically as there are systems that include both
#       virtual and physical devices.
if os.path.isfile("/etc/OTC_region"):
    result = run(
        f"/usr/sbin/hwinfo --disk --short | tail -n +2 | awk '{{print $1}}' | xargs -n1 basename | sort | grep -v {root}",
        stdout=PIPE,
        stderr=PIPE,
        universal_newlines=True,
        shell=True,
    )
else:
    result = run(
        f"/usr/sbin/hwinfo --disk --short | tail -n +2 | grep -i disk | awk '{{print $1}}' | xargs -n1 basename | sort | grep -v {root}",
        stdout=PIPE,
        stderr=PIPE,
        universal_newlines=True,
        shell=True,
    )

devices = result.stdout.strip().split("\n")

# Remove swap devices
for device in devices:
    result = run(
        f"lsblk -f | grep {device} | awk '{{print $2}}'",
        stdout=PIPE,
        stderr=PIPE,
        universal_newlines=True,
        shell=True,
    )
    filesystem = result.stdout.strip()
    if filesystem == "swap":
        devices.remove(device)

print(json.dumps(dict.fromkeys([x for x in devices])))
